# データ削除スクリプト（修正版 - 構文チェック済み）
# 管理者権限で実行される前提

$logPath = "C:\Windows\System32\CleanupLog.txt"

function Write-Log {
    param($Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$timestamp - $Message" | Out-File -FilePath $logPath -Append -Encoding UTF8
}

Write-Log "=== クリーンアップ開始 ==="

try {
    # 1) コンソールにログインしているユーザー（DOMAIN\User または User）を取得
    $userWithDomain = (Get-CimInstance -ClassName Win32_ComputerSystem).UserName

    if (-not $userWithDomain) {
        Write-Log "ERROR: コンソールログインユーザーが取得できませんでした。処理を中止します。"
        throw "Interactive user not found."
    }

    $currentUser = $userWithDomain.Split('\')[-1]
    Write-Log "検出されたインタラクティブユーザー: $currentUser"

    # 2) Win32_UserProfile からプロファイルパスを取得（存在すれば）
    $userProfilePath = $null
    try {
        $userProfilePath = Get-CimInstance -ClassName Win32_UserProfile |
            Where-Object { $_.LocalPath -and ($_.LocalPath -match "\\$currentUser$") } |
            Select-Object -ExpandProperty LocalPath -First 1
    } catch {
        # Win32_UserProfile の取得に失敗した場合はフォールバックに任せる
        Write-Log "注意: Win32_UserProfile からの取得に失敗、フォールバックを試みます。"
    }

    # 3) フォールバック：レジストリの ProfileList を探す
    if (-not $userProfilePath) {
        $regProfiles = Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList" -ErrorAction SilentlyContinue
        foreach ($key in $regProfiles) {
            $p = Get-ItemProperty -Path $key.PSPath -Name "ProfileImagePath" -ErrorAction SilentlyContinue
            if ($p.ProfileImagePath -and ($p.ProfileImagePath -match "\\$currentUser$")) {
                $userProfilePath = $p.ProfileImagePath
                break
            }
        }
    }

    if (-not $userProfilePath) {
        Write-Log "ERROR: ユーザープロファイルのパスが特定できませんでした。処理を中止します。"
        throw "User profile path not found."
    }

    Write-Log "ターゲットプロファイルパス: $userProfilePath"

    # 4) 安全チェック：組み込みアカウントや保護パスを拒否
    $lowerPath = $userProfilePath.ToLowerInvariant()
    $blocked = @(
        "c:\users\administrator",
        "c:\users\default",
        "c:\users\defaultuser0",
        "c:\users\public",
        "c:\windows"
    )
    foreach ($b in $blocked) {
        if ($lowerPath -like "$b*") {
            Write-Log "ERROR: 保護対象のパスを検出しました: $userProfilePath。処理を中止します。"
            throw "Refusing to operate on protected profile: $userProfilePath"
        }
    }

    # 5) 削除対象パスを組み立て
    $userDataPaths = @(
        Join-Path $userProfilePath "Downloads\*",
        Join-Path $userProfilePath "Documents\*",
        Join-Path $userProfilePath "Desktop\*",
        Join-Path $userProfilePath "Pictures\*",
        Join-Path $userProfilePath "Videos\*",
        Join-Path $userProfilePath "Music\*"
    )

    Write-Log "削除対象の一覧:"
    foreach ($p in $userDataPaths) { Write-Log "  $p" }

    # DryRun（テスト用）: $true にすると削除コマンドを実行せずログのみ出す
    $DryRun = $true

    # 6) ファイル削除ループ（存在確認→削除→ログ）
    foreach ($path in $userDataPaths) {
        $parent = Split-Path $path
        if (Test-Path $parent) {
            try {
                if ($DryRun) {
                    Write-Log "DryRun: Remove-Item -Path '$path' -Recurse -Force"
                } else {
                    Remove-Item -Path $path -Recurse -Force -ErrorAction Stop
                    Write-Log "削除成功: $path"
                }
            } catch {
                Write-Log "削除失敗: $path - $($_.Exception.Message)"
            }
        } else {
            Write-Log "存在しないためスキップ: $parent"
        }
    }

    # Chrome 関連（対象プロファイル配下のみ）
    $chromeLocal = Join-Path $userProfilePath "AppData\Local\Google\Chrome\User Data"
    $chromeRoaming = Join-Path $userProfilePath "AppData\Roaming\Google\Chrome"

    foreach ($path in @($chromeLocal, $chromeRoaming)) {
        if (Test-Path $path) {
            try {
                if ($DryRun) {
                    Write-Log "DryRun: Remove-Item -Path '$path' -Recurse -Force"
                } else {
                    Remove-Item -Path $path -Recurse -Force -ErrorAction Stop
                    Write-Log "削除成功: $path"
                }
            } catch {
                Write-Log "削除失敗: $path - $($_.Exception.Message)"
            }
        } else {
            Write-Log "Chrome データが見つかりませんでした: $path"
        }
    }

    # ユーザーの TEMP（プロファイル配下）
    $userTemp = Join-Path $userProfilePath "AppData\Local\Temp\*"
    try {
        if (Test-Path (Split-Path $userTemp)) {
            if ($DryRun) {
                Write-Log "DryRun: Remove-Item -Path '$userTemp' -Recurse -Force"
            } else {
                Remove-Item -Path $userTemp -Recurse -Force -ErrorAction SilentlyContinue
                Write-Log "一時ファイル削除完了: $userTemp"
            }
        } else {
            Write-Log "ユーザー TEMP が見つかりません: $userTemp"
        }
    } catch {
        Write-Log "一時ファイル削除中のエラー: $($_.Exception.Message)"
    }

    Write-Log "=== クリーンアップ完了 ==="

} catch {
    Write-Log "エラー発生: $($_.Exception.Message)"
}



導入手順
1. スクリプトの配置

管理者としてPowerShellを起動
スクリプトを非表示の場所に保存：

powershell# スクリプト保存先ディレクトリを作成
New-Item -Path "C:\Windows\System32\Scripts" -ItemType Directory -Force

# スクリプトをメモ帳で作成
notepad C:\Windows\System32\Scripts\CleanupUserData.ps1

上記のスクリプトをコピー＆ペーストして保存

2. 実行ポリシーの設定
powershell# PowerShellスクリプトの実行を許可
Set-ExecutionPolicy RemoteSigned -Scope LocalMachine -Force
3. タスクスケジューラの設定
シャットダウン時に実行する場合：
powershell# シャットダウン時のタスク作成
$action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-ExecutionPolicy Bypass -WindowStyle Hidden -File C:\Windows\System32\Scripts\CleanupUserData.ps1"

$trigger = New-ScheduledTaskTrigger -AtLogOff

$principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -RunLevel Highest

$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries

Register-ScheduledTask -TaskName "UserDataCleanup_Shutdown" -Action $action -Trigger $trigger -Principal $principal -Settings $settings -Description "シャットダウン時にユーザーデータを削除"
起動時に実行する場合：
powershell# 起動時のタスク作成
$action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-ExecutionPolicy Bypass -WindowStyle Hidden -File C:\Windows\System32\Scripts\CleanupUserData.ps1"

$trigger = New-ScheduledTaskTrigger -AtStartup

$principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -RunLevel Highest

$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries

Register-ScheduledTask -TaskName "UserDataCleanup_Startup" -Action $action -Trigger $trigger -Principal $principal -Settings $settings -Description "起動時にユーザーデータを削除"
4. 動作確認
powershell# 手動でタスクを実行してテスト
Start-ScheduledTask -TaskName "UserDataCleanup_Startup"

# ログを確認
Get-Content C:\Windows\System32\CleanupLog.txt
注意事項
⚠️ 重要な警告：

データは完全に削除されます - 復元できません
テスト環境で十分に検証してください
バックアップが必要なデータは別の場所に保存してください
業務環境で使用する場合は、組織のポリシーを確認してください

オプション設定
特定のフォルダを除外する場合：
スクリプト内の削除対象を調整：
powershell# 例：Documentsフォルダは削除しない場合
$userDataPaths = @(
    "$userProfile\Downloads\*",
    # "$userProfile\Documents\*",  # コメントアウト
    "$userProfile\Desktop\*"
)
複数ユーザーに対応する場合：
全ユーザーを対象にする場合は、スクリプトの先頭に追加：
powershell# 全ユーザーのプロファイルを取得
$users = Get-ChildItem "C:\Users" -Directory | Where-Object { $_.Name -ne "Public" }

foreach ($user in $users) {
    $userProfile = $user.FullName
    # 以降の処理...
}
